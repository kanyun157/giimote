<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">

<html>
<head>
<title>GiiMote Help</title>
<link href="style.css" rel="stylesheet" type="text/css">
</head>
<body background="back.gif">
<!--START-->

<h1><a name="GiiMote">GiiMote</a></h1>

<p>
This package allows Game Maker to read and write state information to and from a Nintendo Wii Remote (unofficially, &quot;Wiimote&quot;) connected wirelessly via a Bluetooth connection. For this extension to work you will need the latest version of the Microsoft .NET Framework installed on your computer.

<p>To use this package in a game, select the item <b>Select Extension Packages</b> in the
<b>Resources</b> menu. In the form that appears 
click on the <b>GiiMote</b> item in the right list and press the button to 
move it to the left list.</p>
<h2><a name="Connecting">Connecting the Wii Remote</a></h2>
<p>Before the Wii Remote can be used in your game it must be connected to the computer wirelessly via Bluetooth. This is much easier said than done. The Wii Remote will not pair successfully with every Bluetooth device or stack so make sure your device and stack are compatible.<br>
To pair your Wii Remote with your computer follow these steps:</p>
<ol>
    <li>Start your Bluetooth software and search for devices.</li>
    <li>Hold down the 1 and 2 buttons on the bottom of the Wii Remote (Or press the Sync button under the battery case if you don't mind losing the pairing with your Wii). The blue LED's should start to flash. Hold these buttons until the process is complete.</li>
    <li>If all is well the Wii Remote should show up in the device list as <b>Nintendo RVL-CNT-01</b>. If not, start the process over.</li>
    <li>Follow the directions given by your Bluetooth software.</li>
    <li>If you are asked to supply a password or PIN number press skip or leave this value blank.</li>
    <li>If you are asked which service to use for the Wii Remote select the keyboard/mouse/HID service.</li>
</ol>
<p>
<h2><a name="setup">Setting Up and Tearing Down GiiMote</a></h2>
<p>Once we have our Wii Remote(s) paired successfully with our computer, we can use it 
    or them in our game. To check if any Wii Remotes are paired correctly you may call the function <b><a name="wm_exists">wm_exists()</a></b> or 
    you may use <b><a name="wm_find_all">wm_find_all()</a></b> to see the number of available Wii Remotes. 
    Each function will only work on a single Wii Remote; to change the active Wii 
    Remote you may call the function <b><a name="wm_set_wm">wm_set_wm(wm)</a></b> where wm is the index or GUID of the Wii Remote to use for future function calls. 
    Each Wii Remote attatched to the system has two unique values which may be used 
    to identify it, the index, which may change as other Wii Remotes are 
    disconnected, and the GUID which can be expressed either as a string, or, 
    numerically. The index is an integer between 0 and the number of connected Wii 
    Remotes - 1, so the first Wii Remote always has an index of 0. The GUID is a 
    128-bit integer so be warned, using it to much can result in large ammounts of 
    overhead. To get the index or GUID of a Wii Remote, the following functions may 
    be used:</p>
<blockquote>
	<tt><b><a name="wm_get_index">wm_get_index(guid)</a></b></tt>
		Gets the index of the Wii Remote with the given guid or numerical guid.<br>
	<tt><b><a name="wm_get_index">wm_get_guid(index)</a></b></tt>
		Gets the guid of the Wii Remote with the given index.<br>
	<tt><b><a name="wm_get_index">wm_get_id(index)</a></b></tt>
		Gets the numerical guid of the Wii Remote with the given index.<br>
</blockquote>
<p>To connect to a single Wii Remote you can call <b><a name="wm_connect">wm_connect()</a></b> which will return either 1 if successful, 0 if the connection failed, or -1 if a Wii Remote is already connected. To connect all discovered Wii Remotes at once you may use <b><a name="wm_connect_all">wm_connect_all()</a></b>. When you are done using the Wii Remote
you can call <b><a name="wm_disconnect">wm_disconnect()</a></b>
to release the Wii Remote or <b><a name="wm_disconnect">wm_disconnect_all()</a></b> to release all connected Wii Remotes. Please note that these functions do not stop the Wii Remote(s) from being paired with your computer! You must disconnect the Wii Remote manually to stop it from using its battery power (Press the power button on the Wii Remote or disconnect via your bluetooth stack). We can also check to see if the active Wii Remote is currently connected to our application by using <b><a name="wm_connected">wm_connected()</a></b>. After the Wii Remote is connected,
we can find out information about the currently plugged in extension (if any) by
calling <b><a name="wm_check_extension">wm_check_extension()</a></b>. This will return one of the following constants:</p>
<blockquote>
	<tt><b><a name="ext_classic">ext_classic</a></b></tt><br>
	<tt><b><a name="ext_nunchuck">ext_nunchuck</a></b></tt><br>
	<tt><b><a name="ext_guitar">ext_guitar</a></b></tt><br>
	<tt><b><a name="ext_none">ext_none</a></b></tt><br>
	<tt><b><a name="ext_unknown">ext_unknown</a></b></tt><br>
</blockquote>
<p>GiiMote stores data about the Wii Remote inside the extension. Anytime you set 
    the rumble, check the battery life, or change the status of the Wii Remote in any way (by 
    turning off an LED for instance) this data is updated and when you call a function which returns some data (wm_get_rumble for instance) it checks this data, not the Wii Remote directly. Most of the time this information is up to date, but sometimes it is still useful to update the status of the Wii Remote manually.
This can be accomplished by calling <b><a name="wm_get_status">wm_get_status()</a></b>. This function sends a request to the Wii Remote which will then send back 
    its current status. The function returns weather or not the update was
a success.</p>
<h2><a name="buttons">Reading Buttons</a></h2>
<p>You can find the status of buttons on the Wii Remote and supported expansion controllers by calling the following functions:</p>
<blockquote>
	<tt><b><a name="wm_check_button">wm_check_button(button)</a></b></tt>
		Gets the status (boolean) of the given button on the Wii Remote.<br>
	<tt><b><a name="wm_classic_check_button">wm_classic_check_button(button)</a></b></tt>
		Gets the status of the given button on the Classic Controller (if inserted).<br>
	<tt><b><a name="wm_nunchuck_check_button">wm_nunchuck_check_button(button)</a></b></tt>
		Gets the status of the given button on the Nunchuck (if inserted).<br>
	<tt><b><a name="wm_guitar_check_button">wm_guitar_check_button(button)</a></b></tt>
		Gets the status of the given button on the Guitar (if inserted).<br>
</blockquote>
<p>There is also an additional function for checking the pressure of L and R on the classic controller:</p>
<blockquote>
		<p><tt><b><a name="wm_classic_trigger_pressure">wm_classic_trigger_pressure(trigger)</a></b></tt>
		This function returns a value between 0.0 and 1.0 depending on the amount the trigger is being pushed in with 1 being all the way in and 0 being released. You may define a &quot;dead zone&quot; for the function by calling <a href="#wm_set_dead_zone">wm_set_dead_zone</a>.</p>
</blockquote>
<p>And another for checking the pressure on the Whammy bar on the Guitar:</p>
<blockquote>
		<p><tt><b><a name="wm_guitar_whammybar_pos">wm_guitar_whammybar_pos()</a></b></tt> The position of the Guitar's whammy bar as a value between 0.0 and 1.0.</p>
</blockquote>
<p>
The following button key codes exist for use in any function that requires a button (not all buttons are available on all controllers):</p>
<blockquote>
	<tt><b><a name="wm_a">wm_a</a></b></tt><br>
	<tt><b><a name="wm_b">wm_b</a></b></tt><br>
	<tt><b><a name="wm_up">wm_up</a></b></tt><br>
	<tt><b><a name="wm_down">wm_down</a></b></tt><br>
	<tt><b><a name="wm_left">wm_left</a></b></tt><br>
	<tt><b><a name="wm_right">wm_right</a></b></tt><br>
	<tt><b><a name="wm_one">wm_one</a></b></tt><br>
	<tt><b><a name="wm_two">wm_two</a></b></tt><br>
	<tt><b><a name="wm_plus">wm_plus</a></b></tt><br>
	<tt><b><a name="wm_minus">wm_minus</a></b></tt><br>
	<tt><b><a name="wm_home">wm_home</a></b></tt><br>
	<tt><b><a name="wm_x">wm_x</a></b></tt><br>
	<tt><b><a name="wm_y">wm_y</a></b></tt><br>
	<tt><b><a name="wm_l">wm_l</a></b></tt><br>
	<tt><b><a name="wm_r">wm_r</a></b></tt><br>
	<tt><b><a name="wm_zl">wm_zl</a></b></tt><br>
	<tt><b><a name="wm_c">wm_c</a></b></tt><br>
	<tt><b><a name="wm_z">wm_z</a></b></tt><br>
	<tt><b><a name="wm_z">wm_blue</a></b></tt><br>
	<tt><b><a name="wm_z">wm_green</a></b></tt><br>
	<tt><b><a name="wm_z">wm_orange</a></b></tt><br>
	<tt><b><a name="wm_z">wm_red</a></b></tt><br>
	<tt><b><a name="wm_z">wm_yellow</a></b></tt><br>
	<tt><b><a name="wm_z">wm_strum_up</a></b></tt><br>
	<tt><b><a name="wm_z">wm_strum_down</a></b></tt><br>
</blockquote>
<h2><a name="joystick">Joystick Positions</a></h2>
<p>The Nunchuck, Classic Controller, and Guitar Controller both contain one or more joysticks which can be utilized with the following functions:</p>
<blockquote>
	<tt><b><a name="wm_nunchuck_xpos">wm_nunchuck_xpos()</a></b></tt> From -0.5 (left) to 0.5 (right).<br>
	<tt><b><a name="wm_nunchuck_ypos">wm_nunchuck_ypos()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_direction">wm_nunchuck_direction()</a></b></tt> Returns a value from 0 to ±180 degrees.<br>
	<tt><b><a name="wm_nunchuck_pressure">wm_nunchuck_pressure()</a></b></tt> Returns the pressure on the joystick as a value between 0 and 1 disregarding direction.<br>
	<tt><b><a name="wm_classic_xpos">wm_classic_xpos(joystick)</a></b></tt><br>
	<tt><b><a name="wm_classic_ypos">wm_classic_ypos(joystick)</a></b></tt><br>
	<tt><b><a name="wm_classic_direction">wm_classic_direction(joystick)</a></b></tt><br>
	<tt><b><a name="wm_classic_pressure">wm_classic_pressure(joystick)</a></b></tt><br>
	<tt><b><a name="wm_guitar_xpos">wm_guitar_xpos()</a></b></tt><br>
	<tt><b><a name="wm_guitar_ypos">wm_guitar_ypos()</a></b></tt><br>
	<tt><b><a name="wm_guitar_direction">wm_guitar_direction()</a></b></tt><br>
	<tt><b><a name="wm_guitar_pressure">wm_guitar_pressure()</a></b></tt><br>
</blockquote>
<p>For the Classic Controller you must specify which joystick to check the values of, for this the following constants are defined:</p>
<blockquote>
	<tt><b><a name="wm_joy_left">wm_joy_left</a></b></tt><br>
	<tt><b><a name="wm_joy_right">wm_joy_right</a></b></tt><br>
</blockquote>
<h2><a name="accel">Accelerometer Data</a></h2>
<p>You can also get data from the Wii Remote and Nunchuck's accelerometers using the following functions:</p>
<blockquote>
	<tt><b><a name="wm_get_accel_x">wm_get_accel_x()</a></b></tt><br>
	<tt><b><a name="wm_get_accel_y">wm_get_accel_y()</a></b></tt><br>
	<tt><b><a name="wm_get_accel_z">wm_get_accel_z()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_x">wm_nunchuck_get_accel_x()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_y">wm_nunchuck_get_accel_y()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_z">wm_nunchuck_get_accel_z()</a></b></tt><br>
</blockquote>
<p>Please note that when you set the remote on a flat surface a value of approximately 1 will be returned on the Z axis. This is because the table is exerting an upwards force on your Wii Remote equal to 1G against the force of gravity. When the remote is in free fall this value will fall to near zero.<br>GiiMote also provides limited higher level functionality which utilizes the accelerometers:</p>
<blockquote>
	<tt><b><a name="wm_get_moving">wm_get_moving()</a></b> Checks to see if the Wii Remote is moving or not</tt><br>
</blockquote>
<h2><a name="dead_zone">Dead Zone's</a></h2>
<p>With any joystick, pressure sensitive trigger, or accelerometer differences in calibration can cause slight deviations from zero. For instance, a joystick centered at (0,0) may return (0.1,0) instead, or, an accelerometer sitting still may feel a slight tremor and read 0.01 when the user intended it to be 0. To address this issue one must define a &quot;dead zone,&quot; or, an amount of tolerance under which no change of value will occur. To set the tolerance level for all joysticks, triggers, and/or accelerometers the following functions may be called (default for all is no-tolerance):</p>
<blockquote>
	<tt><b><a name="wm_set_accel_dead_zone_x">wm_set_accel_dead_zone_x(val)</a></b></tt> Domain from 0 to infinity.<br>
	<tt><b><a name="wm_set_accel_dead_zone_y">wm_set_accel_dead_zone_y(val)</a></b></tt><br>
	<tt><b><a name="wm_set_accel_dead_zone_x">wm_set_accel_dead_zone_z(val)</a></b></tt><br>
	<tt><b><a name="wm_get_accel_dead_zone_x">wm_get_accel_dead_zone_x()</a></b></tt><br>
	<tt><b><a name="wm_get_accel_dead_zone_y">wm_get_accel_dead_zone_y()</a></b></tt><br>
	<tt><b><a name="wm_get_accel_dead_zone_z">wm_get_accel_dead_zone_z()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_set_accel_dead_zone_x">wm_nunchuck_set_accel_dead_zone_x(val)</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_set_accel_dead_zone_y">wm_nunchuck_set_accel_dead_zone_y(val)</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_set_accel_dead_zone_z">wm_nunchuck_set_accel_dead_zone_z(val)</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_dead_zone_x">wm_nunchuck_get_accel_dead_zone_x()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_dead_zone_y">wm_nunchuck_get_accel_dead_zone_z()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_dead_zone_y">wm_nunchuck_get_accel_dead_zone_z()</a></b></tt><br>
	<tt><b><a name="wm_set_joystick_dead_zone">wm_set_joystick_dead_zone(val)</a></b></tt> Domain from 0 to 0.5.<br>
	<tt><b><a name="wm_get_joystick_dead_zone">wm_get_joystick_dead_zone()</a></b></tt><br>
	<tt><b><a name="wm_set_trigger_dead_zone">wm_set_trigger_dead_zone(val)</a></b></tt><br>
	<tt><b><a name="wm_get_trigger_dead_zone">wm_get_trigger_dead_zone()</a></b></tt> Domain from 0 to 1.<br>
</blockquote>
<p>Values outside of the feasible domain will be corrected to the nearest number in the domain.</p>
<h2><a name="IR">Infrared Readout</a></h2>
<p>To utilize pointer functionality in your games you will need to use the Wii Remotes final input method, infrared. To use infrared you will need to place the Wii's sensor bar above or below your screen and supply it with a 12 volt power supply. The sensor bar does not do any &quot;sensing&quot; itself, rather, it outputs infrared light from two sets of five infrared LED's spaced 7.5 inches apart on the bar. This light is picked up by an infrared camera on top of the Wii Remote which can then triangulate
its orientation relative to the sensor bar. The following functions exist to use the Wii Remotes infrared capabilities, please note that values returned by these functions are relative to the Wii Remote, not to your screen.</p>
<blockquote>
		<p><tt><b><a name="wm_ir_found_dot">wm_ir_found_dot(dot)</a></b></tt> Returns weather the Wii Remote can see the given dot (1, 2, 3, or 4) or not.<br>
		<tt><b><a name="wm_ir_dot_size">wm_ir_dot_size(dot)</a></b></tt> Returns the size of dot 1, 2, 3, or 4 as a value between 0 and 15.<br>
		<tt><b><a name="wm_ir_dot_get_x">wm_ir_dot_get_x(dot)</a></b></tt> Returns a normalized value between 0.0 and 1.0 for dot 1, 2, 3, or 4 along the x axis.<br>
		<tt><b><a name="wm_ir_dot_get_y">wm_ir_dot_get_y(dot)</a></b></tt> Returns a normalized value between 0.0 and 1.0 for dot 1, 2, 3, or 4 along the y axis.<br>
		<tt><b><a name="wm_ir_dot_get_midx">wm_ir_dot_get_midx()</a></b></tt> Returns the normalized x value of the midpoint between 0.0 and 1.0 for the first two IR points.<br>
		<tt><b><a name="wm_ir_dot_get_midy">wm_ir_dot_get_midy()</a></b></tt> Returns the normalized y value of the midpoint between 0.0 and 1.0 for the first two IR points.<br>
		<tt><b><a name="wm_ir_dot_get_delta_x">wm_ir_dot_get_delta_x(dot)</a></b></tt> Returns the change in the given dot's x value (&Delta;x) for the most recent update.<br>
		<tt><b><a name="wm_ir_dot_get_delta_y">wm_ir_dot_get_delta_y(dot)</a></b></tt> Returns the change in the given dot's y value (&Delta;y) for the most recent update.<br>
		<tt><b><a name="wm_ir_dot_get_delta_y">wm_ir_dot_get_delta_midx()</a></b></tt> Returns the change in the midpoint's x value for the most recent update.<br>
		<tt><b><a name="wm_ir_dot_get_delta_y">wm_ir_dot_get_delta_midy()</a></b></tt> Returns the change in the midpoint's y value for the most recent update.<br>
</p>
</blockquote>
<p>The functions above get data directly from the Wii Remote and normalize it to fall in the specified domain. GiiMote provides several higher-level functions for getting points from the infrared data relative to the screen and window.</p>
<blockquote>
		<p><tt><b><a name="wm_ir_display_get_x">wm_ir_display_get_x()</a></b></tt> Returns the x location on the display pointed at by the Wii Remote.<br>
		<tt><b><a name="wm_ir_display_get_y">wm_ir_display_get_y()</a></b></tt> Returns the y location on the display pointed at by the Wii Remote.<br>
		<tt><b><a name="wm_ir_window_get_x">wm_ir_window_get_x()</a></b></tt> Returns the x location in the window pointed at by the Wii Remote.<br>
		<tt><b><a name="wm_ir_window_get_y">wm_ir_window_get_y()</a></b></tt> Returns the y location in the window pointed at by the Wii Remote.<br>
</p>
</blockquote>
<p>Finally, to change the sensitivity of the IR camera, the following functions may be called:</p>
<blockquote>
		<p><tt><b><a name="wm_ir_set_sensitivity">wm_ir_set_sensitivity(sensitivity)</a></b></tt> Sets the sensitivity level of the IR camera (1-6, 3 is default)<br>
		<tt><b><a name="wm_ir_get_sensitivity">wm_ir_get_sensitivity()</a></b></tt> Returns the current sensitivity level of the Wii Remote.<br>
</p>
</blockquote>
<h2><a name="MISC">Feedback</a></h2>
<p>The Wii Remote can provide direct feedback to its users in several ways including four LED's on the front of the controller as well as force feedback by means of a weighted motor or by playing sounds through the embedded speaker. It is also possible to have the Wii Remote report the remaining battery life. Out of these options currently only sound is not supported.</p>
<blockquote>
	<tt><b><a name="wm_get_led">wm_get_led(LED)</a></b></tt> Gets the status of LED 1, 2, 3 or 4 as a boolean value.<br>
	<tt><b><a name="wm_set_led">wm_set_led(LED,on)</a></b></tt> Sets the status of LED 1, 2, 3, or 4.<br>
	<tt><b><a name="wm_set_leds">wm_set_leds(led1,led2,led3,led4)</a></b></tt> Sets the status of LED's 1 - 4.<br>
	<tt><b><a name="wm_set_leds_int">wm_set_leds_int(leds)</a></b></tt> Sets the state of all LED's using an integer representation of the binary value which defines the LED's (1-15).<br>
	<tt><b><a name="wm_clear_leds">wm_clear_leds()</a></b></tt> Turns all four LED's off. (Same as calling wm_set_leds(0,0,0,0))<br>
	<tt><b><a name="wm_get_battery">wm_get_battery()</a></b></tt> Returns the remaining battery power of the Wii Remote as a byte between $00 (0) to roughly $C8 (200).<br>
	<tt><b><a name="wm_set_rumble">wm_set_rumble(rumble)</a></b></tt> Turns the Wii Remote's motor on or off.<br>
	<tt><b><a name="wm_get_rumble">wm_get_rumble()</a></b></tt> Checks to see if the Wii Remote's motor is currently active.<br>
</blockquote>
<p>The Wii Remote provides several different methods of feedback which can be utilized by the user. To save battery power, not all of these methods need to be turned on all the time. For instance, if we are not using the infrared capabilities of the Wii Remote it would save power to turn off the infrared camera. To do this we must change the report type of the Wii Remote. The following functions exist to deal with the various report types:</p>
<blockquote>
	<tt><b><a name="wm_set_report_type">wm_set_report_type(report_type,continuous)</a></b></tt> Sets the report type of the Wii Remote. If continuous is false the Wii Remote only sends reports when it undergoes a status change.<br>
	<tt><b><a name="wm_get_report_type">wm_get_report_type()</a></b></tt> Returns the report type of the Wii Remote.<br>
	<tt><b><a name="wm_get_report_continuous">wm_get_report_continuous()</a></b></tt> Returns true if the Wii Remote is set to update continuously and false otherwise.<br>
</blockquote>
<p>The report type can be set using any of the following constants. Please note that the status of the Wii Remote's buttons is included in every report type and that only supported report types are listed here.</p>
<blockquote>
	<tt><b><a name="rt_auto">rt_auto</a></b></tt> Automatically determine the report type. (Default)<br>
	<tt><b><a name="rt_buttons">rt_buttons</a></b></tt> Reports the status of the buttons on the Wii Remote only.<br>
	<tt><b><a name="rt_buttonsaccel">rt_buttonsaccel</a></b></tt> Reports the status of the buttons and accelerometers of the Wii Remote only.<br>
	<tt><b><a name="rt_buttonsextension">rt_buttonsextension</a></b></tt> Returns the status of the Wii Remote's buttons and current extension only.<br>
	<tt><b><a name="rt_extensionaccel">rt_extensionaccel</a></b></tt> Returns the status of the Wii Remote's buttons, current extension, and accelerometers.<br>
	<tt><b><a name="rt_iraccel">rt_iraccel</a></b></tt> Returns the status of the Wii Remote's buttons, infrared camera, and accelerometers.<br>
	<tt><b><a name="rt_irextensionaccel">rt_irextensionaccel</a></b></tt> Returns the status of the Wii Remote's buttons, infrared camera, current extension, and accelerometers.<br>
	<tt><b><a name="rt_readdata">rt_readdata</a></b></tt> Read data from the Wii Remote's memory space/registers only.<br>
	<tt><b><a name="rt_status">rt_status</a></b></tt> Returns the status of the Wii Remote only.<br>
</blockquote>
<h2><a name="orientation">Orientation</a></h2>
<p>Several routines are defined to get the orientation of the Wii Remote. For most, the accelerometer data is all you will need, but for a few IR must be used as well.</p>
<blockquote>
	<tt><b><a name="wm_get_roll">wm_get_roll()</a></b></tt> Returns the roll of the Wii Remote.<br>
	<tt><b><a name="wm_get_pitch">wm_get_pitch()</a></b></tt> Returns the pitch of the Wii Remote.<br>
	<tt><b><a name="wm_get_yaw">wm_get_yaw()</a></b></tt> Attempts to estimate the Yaw of the Wii Remote. Requires IR.<br>
	<tt><b><a name="wm_get_altitude">wm_get_altitude()</a></b></tt> Returns the distance from the sensor bar to the Wii Remote in meters. Requires IR.<br>
</blockquote>
<h2><a name="MII">Mii Data</a></h2>
<p>Mii's are avatars that a user can design on the Wii and use as a character in supported channels and games. Mii's can be stored on the Wii Remote to take between consoles. Mii's found in Mii Parade are also stored on the Wii Remote and occupy any space not taken up by user saved Mii data. Mii data comes in two 750 byte blocks each followed by a two byte CRC hash. The Wii console reads the first block of Mii data and then checks the CRC checksum, if they match the block
is used, if not it goes onto the second block and if that does not check out no Mii's are displayed. The following functions allow you to dump and inject Mii data to and from the Wii Remote; if you wish to change the Mii's properties you will have to do so using Game Maker's built in file functions.</p>
<blockquote>
	<tt><b><a name="wm_mii_data_dump">wm_mii_data_dump(path,block,mii)</a></b></tt> Dumps a single Mii from block 1 or 2 from the Wii Remote to the specified file. If no Mii is specified the entire block is dumped, if no block is specified both blocks are dumped.<br>
	<tt><b><a name="wm_mii_data_inject">wm_mii_data_inject(path,block,mii)</a></b></tt> Injects a Mii to the Wii Remote from the specified file. The file may contain either one or two blocks of data. If no Mii is specified the entire block is injected, if no block is specified then both blocks are injected. The CRC checksum is automatically updated for Mii's injected into the Wii Remote when this function is called, but not in the original file.<br>
	<tt><b><a name="wm_mii_update_crc">wm_mii_update_crc(path)</a></b></tt> Updates the CRC for a modified Mii data file dumped using wm_mii_data_dump. This does not update the CRC on the Wii Remote; to do this you must use wm_mii_data_inject!<br>
	<tt><b><a name="wm_mii_get_address">wm_mii_get_address(mii, block)</a></b></tt> Returns the address of a specific Mii (1-10) in a specific block (1 or 2).<br>
</blockquote>
<p>Please note that dumping and injecting Mii's is an <i>extremely</i> slow process. Use sparingly.</p>
<h2><a name="fStream">Reading and Writing Data</a></h2>
<p>There are two functions to read and write raw data from and to the Wii Remote. These functions allow you to define your own routines for changing unsupported settings. Please be warned: you can easily destroy the data on your Wii Remote using these functions. Use at your own risk! With that said, the functions are:</p>
<blockquote>
	<tt><b><a name="wm_bin_write_byte">wm_bin_write_byte(address, byte)</a></b></tt><br>
	<tt><b><a name="wm_bin_write_byte">wm_bin_read_byte(address)</a></b></tt><br>
</blockquote>
<p>These functions require that you know something about how the Wii Remote stores data. More information can be found online.</p>
<h2><a name="hidden">Raw Data Functions</a></h2>
There are several hidden functions to get raw, unprocessed data from the Wii Remote:
<blockquote>
	<tt><b><a name="wm_get_accel_rawx">wm_get_accel_rawx()</a></b></tt><br>
	<tt><b><a name="wm_get_accel_rawy">wm_get_accel_rawy()</a></b></tt><br>
	<tt><b><a name="wm_get_accel_rawz">wm_get_accel_rawz()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_rawx">wm_nunchuck_get_accel_rawx()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_rawy">wm_nunchuck_get_accel_rawy()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_get_accel_rawz">wm_nunchuck_get_accel_rawz()</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_rawx">wm_ir_dot_get_rawx(dot)</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_rawy">wm_ir_dot_get_rawy(dot)</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_rawmidx">wm_ir_dot_get_rawmidx()</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_rawmidy">wm_ir_dot_get_rawmidy()</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_delta_rawx">wm_ir_dot_get_delta_rawx(dot)</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_delta_rawy">wm_ir_dot_get_delta_rawy(dot)</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_delta_rawmidx">wm_ir_dot_get_delta_rawmidx()</a></b></tt><br>
	<tt><b><a name="wm_ir_dot_get_delta_rawmidy">wm_ir_dot_get_delta_rawmidy()</a></b></tt><br>
	<tt><b><a name="wm_classic_trigger_raw">wm_classic_trigger_raw(trigger)</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_rawx">wm_nunchuck_rawx()</a></b></tt><br>
	<tt><b><a name="wm_nunchuck_rawy">wm_nunchuck_rawy()</a></b></tt><br>
	<tt><b><a name="wm_classic_rawx">wm_classic_rawx(joystick)</a></b></tt><br>
	<tt><b><a name="wm_classic_rawy">wm_classic_rawy(joystick)</a></b></tt><br>
	<tt><b><a name="wm_guitar_rawx">wm_guitar_rawx()</a></b></tt><br>
	<tt><b><a name="wm_guitar_rawy">wm_guitar_rawy()</a></b></tt><br>
	<tt><b><a name="wm_guitar_whammybar_rawpos">wm_guitar_whammybar_rawpos()</a></b></tt><br>
</blockquote>
<p>These functions are for advanced use only and return data that has not been normalized.</p>

<h2><a name="calibration">Calibration</a></h2>
It is also possible to set the calibration data for the Wii Remote and extensions. The following functions exist to deal with calibration data:
<blockquote>
		<p><tt><b><a name="wm_get_calibration_x0">wm_get_calibration_x0,y0, and z0()</a></b></tt> Returns the zero points for the x, y and z axes<br>
	<tt><b><a name="wm_get_calibration_xg">wm_get_calibration_xg,yg, and zg()</a></b></tt> Returns the +1G points for the x, y and z axes<br>
	<tt><b><a name="wm_set_calibration_x0">wm_set_calibration_x0,y0, and z0(val)</a></b></tt> Sets the zero points for the x, y and z axes<br>
	<tt><b><a name="wm_set_calibration_xg">wm_set_calibration_xg,yg, and zg(val)</a></b></tt> Sets the +1G points for the x, y and z axes<br>
	<tt><b><a name="wm_nunchuck_get_calibration_x0">wm_nunchuck_get_calibration_x0,y0, and z0()</a></b></tt> Returns the zero points for the x, y and z axes<br>
	<tt><b><a name="wm_nunchuck_get_calibration_xg">wm_nunchuck_get_calibration_xg,yg, and zg()</a></b></tt> Returns the +1G points for the x, y and z axes<br>
	<tt><b><a name="wm_nunchuck_get_calibration_maxx">wm_nunchuck_get_calibration_maxx and maxy()</a></b></tt> Returns the joystick X/Y-axis' maximum value<br>
	<tt><b><a name="wm_nunchuck_get_calibration_midx">wm_nunchuck_get_calibration_midx and midy()</a></b></tt> Returns the joystick X/Y-axis' center value<br>
	<tt><b><a name="wm_nunchuck_get_calibration_minx">wm_nunchuck_get_calibration_miny and miny()</a></b></tt> Returns the joystick X/Y-axis' minimum value<br>
	<tt><b><a name="wm_nunchuck_set_calibration_xg">wm_nunchuck_set_calibration_xg,yg, and zg(val)</a></b></tt> Sets the +1G points for the x, y and z axes<br>
	<tt><b><a name="wm_nunchuck_set_calibration_x0">wm_nunchuck_set_calibration_x0,y0, and z0(val)</a></b></tt> Sets the zero points for the x, y and z axes<br>
	<tt><b><a name="wm_nunchuck_set_calibration_maxx">wm_nunchuck_set_calibration_maxx and maxy(val)</a></b></tt> Sets the joystick X/Y-axis' maximum value<br>
	<tt><b><a name="wm_nunchuck_set_calibration_midx">wm_nunchuck_set_calibration_midx and midy(val)</a></b></tt> Sets the joystick X/Y-axis' center value<br>
	<tt><b><a name="wm_nunchuck_set_calibration_minx">wm_nunchuck_set_calibration_minx and miny(val)</a></b></tt> Sets the joystick X/Y-axis' minimum value<br>
	<tt><b><a name="wm_classic_get_calibration_trigger">wm_classic_get_calibration_maxtrigger and mintrigger(trigger)</a></b></tt> Returns the maximum and minimum trigger values<br>
	<tt><b><a name="wm_classic_get_calibration_maxx">wm_classic_get_calibration_maxx and maxy(joystick)</a></b></tt> Returns maximum joystick values for the x or y axis<br>
	<tt><b><a name="wm_classic_get_calibration_midx">wm_classic_get_calibration_midx and midy(joystick)</a></b></tt> Returns the centered joystick values for the x or y axis<br>
	<tt><b><a name="wm_classic_get_calibration_minx">wm_classic_get_calibration_minx and miny(joystick)</a></b></tt> Returns the minimum joystick values for the x or y axis<br>
	<tt><b><a name="wm_classic_set_calibration_trigger">wm_classic_set_calibration_maxtrigger and mintrigger(trigger, val)</a></b></tt> Sets the maximum and minimum trigger values<br>
	<tt><b><a name="wm_classic_set_calibration_maxx">wm_classic_set_calibration_maxx and maxy(joystick, val)</a></b></tt> Sets the maximum joystick values for the x or y axis<br>
	<tt><b><a name="wm_classic_set_calibration_midx">wm_classic_set_calibration_midx and midy(joystick, val)</a></b></tt> Sets the centered joystick values for the x or y axis<br>
	<tt><b><a name="wm_classic_set_calibration_minx">wm_classic_set_calibration_minx and miny(joystick, val)</a></b></tt> Sets the minimum joystick values for the x or y axis<br>
</p>
</blockquote>
<p>NOTE: These functions are for advanced use only and can cause your Wii Remote to function poorly if used improperly.</p>
<p><!--END-->
</p>
</body>
</html>
